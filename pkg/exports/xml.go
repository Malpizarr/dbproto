package exports

import (
	"encoding/xml"
	"fmt"
	"os"

	"github.com/Malpizarr/dbproto/pkg/dbdata"
	"google.golang.org/protobuf/types/known/structpb"
)

type RecordXML struct {
	XMLName xml.Name   `xml:"Record"`
	Fields  []FieldXML `xml:"Field"`
}

type FieldXML struct {
	Key   string `xml:"Key,attr"`
	Value string `xml:"Value"`
}

func formatProtoValueXML(val *structpb.Value) string {
	if val == nil {
		return ""
	}

	switch x := val.Kind.(type) {
	case *structpb.Value_StringValue:
		return x.StringValue
	case *structpb.Value_NumberValue:
		if float64(int(x.NumberValue)) == x.NumberValue {
			return fmt.Sprintf("%d", int(x.NumberValue))
		}
		return fmt.Sprintf("%.3f", x.NumberValue)
	case *structpb.Value_BoolValue:
		return fmt.Sprintf("%t", x.BoolValue)
	default:
		return fmt.Sprintf("%v", val)
	}
}

// ExportRecordsToXML exports a slice of records to an XML file.
func ExportRecordsToXML(records []*dbdata.Record, filename string) error {
	file, err := os.Create(filename)
	if err != nil {
		return err
	}
	defer file.Close()

	encoder := xml.NewEncoder(file)
	encoder.Indent("", "  ")
	_, _ = file.WriteString("<!-- Generated by dbproto CLI -->\n")

	xmlRecords := make([]RecordXML, 0, len(records))
	for _, rec := range records {
		fields := make([]FieldXML, 0, len(rec.Fields))
		for key, protoVal := range rec.Fields {
			formattedValue := formatProtoValueXML(protoVal)
			fields = append(fields, FieldXML{Key: key, Value: formattedValue})
		}
		xmlRecords = append(xmlRecords, RecordXML{Fields: fields})
	}

	if err := encoder.Encode(xmlRecords); err != nil {
		return err
	}
	return nil
}
